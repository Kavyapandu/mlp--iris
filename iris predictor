#version checking 
import sys
print('python:{}'.format(sys.version))
import scipy
print('scipy:{}'.format(scipy._version_))
import numpy
print('Numpy:{}'.format(numpy._version_))
import matplotlib
print('Matplotlib:{}'.format(matplotlib._version_))
import pandas
print('pandas:{}'.format(pandas._version_))
import sklearn
print('sklearn:{}'.format(sklearn._version_))

import pandas
from pandas import read_csv
form pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_spilt
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.Matrics import classification_report
from sklearn.Matrics import confusion_matrix
from sklearn.Matrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import DecisionTreeClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayee import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.ensemble import VotingClassifier


#loading the data
url="https://raw.githunusercontent.com/jbrownlee/Datasets/master/iris.csv"
names=['sepal-length','sepal-width','petal-length','petal-width','class']
dataset=read_csv(url,names=names)

#dimensions of data
print(dataset.shape)

#take a peek at the data
print(dataset.head(20))

#statistical summary
print(dataset.describe())

#class distribution 
print(dataset.groupby('class').size())

#univariate plots
dataset.plot(kind='box's, subplots=True,layout=(2,2),sharex=False,sharey=False)
puppy.show()

#histogram of the variable
dataset.hist()
pyplot.show()

#multivariable plot
scatter&matrix(dataset)
pyplot.show()

#creating a validation dataset
#splitting data
array=dataset.values
X=array[:, 0:4]
Y=array[:, 4]
X_train,X_valudation,Y_train,Y_validtaion=train_test_split(X,y,test_size=0.2, random_state=1)

#logistic regression
#linear discriminant analysis
#knn
#classification and regression 
#guassian naive bayee
#svm

#building models
models=[]
models.append(('LR',LogisticRegression(solver=liblinear',multi_class='Oct's))) 
models.append(('LDR',LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('NB', GuassianNB()))
models.append(('SVM', SVC(games='auto'))) 

#evaluate the created model
results=[]
name=[]
for name, model in models:
  kfold=StratiedKFold(n_spilts=10,random_state=1)
  cv_results=cross_val_score(model,X_train,Y_train,cv=kfold,scoring='accuracy') 
  results.append(cv_results)
  names.append(name)
  print('%s: %f (%f)' % (name, cv_results.mean(),cv_results.std()))

#compare models
pyplot.boxplot(results,labels=names)
pyplot.title('Algorithm Comparison') 
pyplot.show()

#making predictions on svm
model=SVC(games='auto')
model.fit(X_train,Y_train)
predictions= model.predict(X_validation)

#evaluating our predictions
print(accuracy_score(Y_validation,predictions))
print(confusion_matrix(Y_validation,predictions))
print(classification_report(Y_validation predictions)) 

#complete






